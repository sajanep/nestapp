AWSTemplateFormatVersion: '2010-09-09'
Description: Template for an API service that runs as an ECS task and is accessed via the load balancer.

Parameters:
  VpcId:
    Description: VPC where the ECS tasks and ALB will run
    Type: AWS::EC2::VPC::Id

  SubnetIds:
    Description: List of subnets for ALB
    Type: List<AWS::EC2::Subnet::Id>

  EcsCluster:
    Description: The ECS cluster to deploy the services to
    Type: String

  # EcsAlbListener:
  #   Description: The Application Load Balancer HTTPS listener to register with
  #   Type: String
  
  EcsAlbListenerHTTP:
    Description: The Application Load Balancer HTTP listener to register with
    Type: String

  AlbListenerRulePriority:
    Description: The priorityof the listener rule (must be different for each env on the same ALB)
    Type: Number
  
  ServiceContainerPort:
    Description: The container port to which the API listens to.
    Type: String
    Default: "3000"
  
  EcsTaskExecutionRoleArn:
    Description: The role to apply to ECS task/task definitions.
    Type: String
  
  PostgresDbConStr:
    Description: The Postgres DB connection string.
    Type: String  

  Env:
    Type: String
    Default: "dev"
    Description: Environment

  ProjectName:
    Type: String
    Description: Project Name   
  
  LogLevel:
    Type: String
    Description: Log level of the micro service
    Default: 'info'
    AllowedValues: ['error', 'warn', 'info', 'http', 'verbose', 'debug', 'silly']

Resources:
  ApiCloudwatchLogsGroupEnv:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub ${ProjectName}-api-ecs-log-${Env}
      RetentionInDays: 30 

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: FargateTask
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref EcsTaskExecutionRoleArn
      TaskRoleArn:  !GetAtt EcsTaskRole.Arn
      ContainerDefinitions:
        - Name: !Sub ${ProjectName}-api-container-${Env}
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ProjectName}-api-${Env}:latest
          Environment:
            - Name: PORT
              Value: !Ref ServiceContainerPort
            - Name: AWS_REGION
              Value: !Sub ${AWS::Region}
            - Name: DB_CONNECTION_STRING
              Value: !Ref PostgresDbConStr
            - Name: LOG_LEVEL
              Value: !Ref LogLevel
          PortMappings:
            - ContainerPort: !Ref ServiceContainerPort
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ApiCloudwatchLogsGroupEnv
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: api

  EcsTaskSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS tasks
      VpcId: !Ref VpcId
  
  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - ALBListenerRule
    Properties:
      Cluster: !Ref EcsCluster
      TaskDefinition: !Ref TaskDefinition
      LaunchType: FARGATE
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets: !Ref SubnetIds
          SecurityGroups:
            - !Ref EcsTaskSecurityGroup
      LoadBalancers:
        - ContainerName: !Sub ${ProjectName}-api-container-${Env}
          ContainerPort: !Ref ServiceContainerPort
          TargetGroupArn: !Ref ALBTargetGroup

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: EcsFargateTargetGroup
      Protocol: HTTP
      Port: !Ref ServiceContainerPort
      VpcId: !Ref VpcId
      TargetType: ip
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      Matcher:
        HttpCode: 200
  
  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref EcsAlbListenerHTTP
      Conditions:
        - Field: path-pattern
          Values:
            - "/api/*"
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      Priority: !Ref AlbListenerRulePriority 
  
  EcsTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: AccessSecretsManager
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:my-secret-name-* # Replace with your secret ARN(s)
